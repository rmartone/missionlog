{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n * @module missionlog\n * @author Ray Martone\n * @copyright Copyright (c) 2019-2025 Ray Martone\n * @license MIT\n * @description A lightweight TypeScript logger providing level-based filtering and tagging capabilities.\n * missionlog is designed as a drop-in replacement for console.log with additional features for\n * categorizing and filtering logs by severity levels and custom tags.\n *\n * Key features:\n * - Type safety with LogMessage and LogConfig interfaces\n * - Performance optimizations with level caching\n * - Enhanced API with structured logging support via EnhancedLogCallback\n * - Fully chainable API with all methods returning the logger instance\n * - Level checking with isLevelEnabled() and configuration reset()\n * - Full backward compatibility with existing logging patterns\n */\n\nenum Level {\n  TRACE = 1,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  OFF,\n}\n\nexport enum LogLevel {\n  TRACE = 'TRACE',\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n  OFF = 'OFF',\n}\n\nexport type LogLevelStr = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\nexport type LogMessage = string | number | boolean | object | Error | null | undefined;\n\nexport interface LogCallbackParams {\n  level: LogLevelStr;\n  tag: string;\n  message: LogMessage;\n  params: unknown[];\n  timestamp: Date;\n}\n\nexport type LogCallback = (level: LogLevelStr, tag: string, message: unknown, optionalParams: unknown[]) => void;\nexport type EnhancedLogCallback = (params: LogCallbackParams) => void;\n\nexport interface LogConfig {\n  [tag: string]: LogLevelStr;\n}\n\nexport const DEFAULT_TAG = '*';\nconst tagRegistry = new Set<string>();\n\n/**\n * Proxy object for type-safe tag access\n * Provides autocompletion and validation for registered tags\n */\nexport const tag: Record<string, string> = new Proxy(\n  {},\n  {\n    get(_, prop: string) {\n      if (typeof prop === 'string' && tagRegistry.has(prop)) {\n        return prop;\n      }\n      return undefined;\n    },\n    ownKeys() {\n      return Array.from(tagRegistry);\n    },\n    getOwnPropertyDescriptor() {\n      return { enumerable: true, configurable: true };\n    },\n  },\n);\n\n// Map to convert numeric Level enum to string representation\nconst LEVEL_STR_MAP = new Map<Level, LogLevelStr>([\n  [Level.TRACE, 'TRACE'],\n  [Level.DEBUG, 'DEBUG'],\n  [Level.INFO, 'INFO'],\n  [Level.WARN, 'WARN'],\n  [Level.ERROR, 'ERROR'],\n  [Level.OFF, 'OFF'],\n]);\n\n// Map to convert string level to numeric Level enum\nconst STR_TO_LEVEL_MAP = new Map<LogLevelStr, Level>([\n  ['TRACE', Level.TRACE],\n  ['DEBUG', Level.DEBUG],\n  ['INFO', Level.INFO],\n  ['WARN', Level.WARN],\n  ['ERROR', Level.ERROR],\n  ['OFF', Level.OFF],\n]);\n\nexport class Log {\n  private _defaultLevel: Level = Level.INFO;\n  protected readonly _tagToLevel = new Map<string, Level>();\n  private readonly _levelCache = new Map<string, boolean>();\n  protected _callback?: LogCallback | null;\n  protected _enhancedCallback?: EnhancedLogCallback;\n\n  /**\n   * Initialize the logger with configuration and callback\n   * @param config - Map of tags to log levels\n   * @param callback - Callback function for log processing\n   */\n  init(config?: Record<string, string> | LogConfig, callback?: LogCallback | null): this {\n    // Clear caches when configuration changes\n    this._levelCache.clear();\n\n    if (config) {\n      for (const key in config) {\n        const levelStr = config[key] as LogLevelStr;\n        this._setTagLevel(key, levelStr);\n      }\n    }\n\n    if (callback !== undefined) {\n      this._callback = callback;\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the log level for a specific tag\n   * @param tag - The tag to set the level for\n   * @param levelStr - The log level as a string\n   */\n  private _setTagLevel(tag: string, levelStr: LogLevelStr): void {\n    // Use direct map lookup instead of Object.values + includes\n    const level = STR_TO_LEVEL_MAP.get(levelStr);\n\n    if (level !== undefined) {\n      if (tag === DEFAULT_TAG) {\n        this._defaultLevel = level;\n      } else {\n        this._tagToLevel.set(tag, level);\n        tagRegistry.add(tag);\n      }\n    } else {\n      console.warn(\n        `Invalid log level \"${levelStr}\" for tag \"${tag}\". Using default (${LEVEL_STR_MAP.get(this._defaultLevel)}).`,\n      );\n      // Use DEBUG as fallback level for invalid configurations\n      this._tagToLevel.set(tag, Level.DEBUG);\n      tagRegistry.add(tag);\n    }\n  }\n\n  /**\n   * Set an enhanced callback that receives structured log data\n   * @param callback - Enhanced callback function\n   */\n  setEnhancedCallback(callback: EnhancedLogCallback): this {\n    this._enhancedCallback = callback;\n    return this;\n  }\n\n  /**\n   * Check if a message should be logged based on level and tag\n   * @param level - The log level\n   * @param tag - The log tag\n   */\n  private _shouldLog(level: Level, tag: string): boolean {\n    // Use cache to avoid repeated lookups and comparisons\n    const cacheKey = `${level}:${tag || DEFAULT_TAG}`;\n    if (this._levelCache.has(cacheKey)) {\n      return this._levelCache.get(cacheKey)!;\n    }\n\n    const effectiveLevel = this._tagToLevel.get(tag || DEFAULT_TAG) ?? this._defaultLevel;\n    const shouldLog = level >= effectiveLevel;\n\n    // Cache the result\n    this._levelCache.set(cacheKey, shouldLog);\n    return shouldLog;\n  }\n\n  /**\n   * Internal logging implementation\n   */\n  private _log(level: Level, messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    if (!this._callback && !this._enhancedCallback) return;\n    if (messageOrTag === undefined) return;\n\n    let tag: string = '';\n    let message: unknown;\n\n    // Handle tag-based logging\n    if (typeof messageOrTag === 'string' && tagRegistry.has(messageOrTag)) {\n      tag = messageOrTag;\n      message = optionalParams[0] ?? '';\n      optionalParams = optionalParams.slice(1);\n    } else {\n      message = messageOrTag;\n    }\n\n    // Skip if message is undefined, empty, or if level is filtered\n    if (message === undefined || message === '') return;\n    if (!this._shouldLog(level, tag)) return;\n\n    // Filter out undefined parameters\n    const filteredParams = optionalParams.filter(param => param !== undefined);\n    const levelStr = LEVEL_STR_MAP.get(level)!;\n\n    // Call legacy callback for backward compatibility\n    if (this._callback) {\n      this._callback(levelStr, tag, message, filteredParams);\n    }\n\n    // Call enhanced callback with structured data if available\n    if (this._enhancedCallback) {\n      this._enhancedCallback({\n        level: levelStr,\n        tag,\n        message: message as LogMessage,\n        params: filteredParams,\n        timestamp: new Date(),\n      });\n    }\n  }\n\n  /**\n   * Log a message at DEBUG level\n   * @returns this for chaining\n   */\n  public debug(messageOrTag?: unknown, ...optionalParams: unknown[]): this {\n    this._log(Level.DEBUG, messageOrTag, ...optionalParams);\n    return this;\n  }\n\n  /**\n   * Log a message at ERROR level\n   * @returns this for chaining\n   */\n  public error(messageOrTag?: unknown, ...optionalParams: unknown[]): this {\n    this._log(Level.ERROR, messageOrTag, ...optionalParams);\n    return this;\n  }\n\n  /**\n   * Log a message at INFO level\n   * @returns this for chaining\n   */\n  public info(messageOrTag?: unknown, ...optionalParams: unknown[]): this {\n    this._log(Level.INFO, messageOrTag, ...optionalParams);\n    return this;\n  }\n\n  /**\n   * Log a message at INFO level (alias for info)\n   * @returns this for chaining\n   */\n  public log(messageOrTag?: unknown, ...optionalParams: unknown[]): this {\n    this._log(Level.INFO, messageOrTag, ...optionalParams);\n    return this;\n  }\n\n  /**\n   * Log a message at TRACE level\n   * @returns this for chaining\n   */\n  public trace(messageOrTag?: unknown, ...optionalParams: unknown[]): this {\n    this._log(Level.TRACE, messageOrTag, ...optionalParams);\n    return this;\n  }\n\n  /**\n   * Log a message at WARN level\n   * @returns this for chaining\n   */\n  public warn(messageOrTag?: unknown, ...optionalParams: unknown[]): this {\n    this._log(Level.WARN, messageOrTag, ...optionalParams);\n    return this;\n  }\n\n  /**\n   * Check if a specific level would be logged for a tag\n   * @param level - The log level to check\n   * @param tag - The tag to check (optional)\n   */\n  public isLevelEnabled(level: LogLevelStr, tag: string = DEFAULT_TAG): boolean {\n    const numericLevel = STR_TO_LEVEL_MAP.get(level);\n    if (numericLevel === undefined) return false;\n    return this._shouldLog(numericLevel, tag);\n  }\n\n  /**\n   * Clear all tag registrations and configurations\n   */\n  public reset(): this {\n    this._tagToLevel.clear();\n    this._levelCache.clear();\n    this._defaultLevel = Level.INFO;\n    return this;\n  }\n}\n\nexport const log = new Log();\n"],
  "mappings": "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",
  "names": ["LogLevel", "DEFAULT_TAG", "tagRegistry", "tag", "_", "prop", "LEVEL_STR_MAP", "STR_TO_LEVEL_MAP", "Log", "config", "callback", "key", "levelStr", "level", "cacheKey", "effectiveLevel", "shouldLog", "messageOrTag", "optionalParams", "message", "filteredParams", "param", "numericLevel", "log"]
}
