{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n * @author Ray Martone\n * @copyright Copyright (c) 2019-2025 Ray Martone\n * @license MIT\n * @description Log adapter providing level-based filtering and tagging.\n */\n\nenum Level {\n  TRACE = 1,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  OFF,\n}\n\nexport enum LogLevel {\n  TRACE = 'TRACE',\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n  OFF = 'OFF',\n}\n\nexport type LogCallback = (level: LogLevelStr, tag: string, message: unknown, optionalParams: unknown[]) => void;\n\nexport type LogLevelStr = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\n\nconst tagRegistry = new Set<string>();\n\nexport const tag: Record<string, string> = new Proxy(\n  {},\n  {\n    get(_, prop: string) {\n      if (typeof prop === 'string') {\n        if (!tagRegistry.has(prop)) {\n          tagRegistry.add(prop);\n          console.debug(`logger: unregistered tag, \"${prop}\"`);\n        }\n        return prop;\n      }\n    },\n    ownKeys() {\n      return Array.from(tagRegistry);\n    },\n    getOwnPropertyDescriptor() {\n      return { enumerable: true, configurable: true };\n    },\n  },\n);\n\nconst LEVEL_MAP = new Map<LogLevelStr, Level>([\n  ['TRACE', Level.TRACE],\n  ['DEBUG', Level.DEBUG],\n  ['INFO', Level.INFO],\n  ['WARN', Level.WARN],\n  ['ERROR', Level.ERROR],\n  ['OFF', Level.OFF],\n]);\n\nconst LEVEL_STR_MAP = new Map<Level, LogLevelStr>([\n  [Level.TRACE, 'TRACE'],\n  [Level.DEBUG, 'DEBUG'],\n  [Level.INFO, 'INFO'],\n  [Level.WARN, 'WARN'],\n  [Level.ERROR, 'ERROR'],\n  [Level.OFF, 'OFF'],\n]);\n\nexport class Log {\n  private readonly _defaultLevel: Level = Level.TRACE;\n  protected readonly _tagToLevel = new Map<string, Level>();\n  protected _callback?: LogCallback | null;\n\n  protected levelToString(level: Level): LogLevelStr {\n    return LEVEL_STR_MAP.get(level)!;\n  }\n\n  init(config?: Record<string, string>, callback?: LogCallback | null): this {\n    if (config) {\n      for (const key in config) {\n        const levelStr = config[key] as LogLevelStr;\n\n        if (LEVEL_MAP.has(levelStr)) {\n          this._tagToLevel.set(key, LEVEL_MAP.get(levelStr)!);\n        } else {\n          console.warn(\n            `Invalid log level \"${levelStr}\" for tag \"${key}\". Using default (${this.levelToString(this._defaultLevel)}).`,\n          );\n          this._tagToLevel.set(key, this._defaultLevel);\n        }\n\n        tagRegistry.add(key);\n      }\n    }\n\n    // Preserve undefined behavior unless explicitly setting null\n    if (callback !== undefined) {\n      this._callback = callback;\n    }\n\n    return this;\n  }\n\n  private getEffectiveLogLevel(tag: string): Level {\n    if (!this._tagToLevel.has(tag)) {\n      if (!tagRegistry.has(tag)) {\n        console.debug(`logger: unregistered tag, \"${tag}\"`);\n      }\n      return this._defaultLevel;\n    }\n    return this._tagToLevel.get(tag)!;\n  }\n\n  private log<T extends string>(level: Level, tag: T, message: unknown, optionalParams: unknown[]): void {\n    if (!this._callback) {\n      return;\n    }\n\n    const effectiveLevel = this.getEffectiveLogLevel(tag);\n\n    if (level < effectiveLevel) {\n      return;\n    }\n\n    const levelStr = this.levelToString(level);\n    this._callback(levelStr, tag, message, optionalParams);\n  }\n\n  debug<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.DEBUG, tag, message, optionalParams);\n  }\n\n  error<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.ERROR, tag, message, optionalParams);\n  }\n\n  info<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.INFO, tag, message, optionalParams);\n  }\n\n  trace<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.TRACE, tag, message, optionalParams);\n  }\n\n  warn<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.WARN, tag, message, optionalParams);\n  }\n}\n\nexport const log = new Log();\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;GAgBO,IAAKA,OACVA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,IAAM,MANIA,OAAA,IAaNC,EAAc,IAAI,IAEXC,EAA8B,IAAI,MAC7C,CAAC,EACD,CACE,IAAIC,EAAGC,EAAc,CACnB,GAAI,OAAOA,GAAS,SAClB,OAAKH,EAAY,IAAIG,CAAI,IACvBH,EAAY,IAAIG,CAAI,EACpB,QAAQ,MAAM,8BAA8BA,CAAI,GAAG,GAE9CA,CAEX,EACA,SAAU,CACR,OAAO,MAAM,KAAKH,CAAW,CAC/B,EACA,0BAA2B,CACzB,MAAO,CAAE,WAAY,GAAM,aAAc,EAAK,CAChD,CACF,CACF,EAEMI,EAAY,IAAI,IAAwB,CAC5C,CAAC,QAAS,CAAW,EACrB,CAAC,QAAS,CAAW,EACrB,CAAC,OAAQ,CAAU,EACnB,CAAC,OAAQ,CAAU,EACnB,CAAC,QAAS,CAAW,EACrB,CAAC,MAAO,CAAS,CACnB,CAAC,EAEKC,EAAgB,IAAI,IAAwB,CAChD,CAAC,EAAa,OAAO,EACrB,CAAC,EAAa,OAAO,EACrB,CAAC,EAAY,MAAM,EACnB,CAAC,EAAY,MAAM,EACnB,CAAC,EAAa,OAAO,EACrB,CAAC,EAAW,KAAK,CACnB,CAAC,EAEYC,EAAN,KAAU,CACE,cAAuB,EACrB,YAAc,IAAI,IAC3B,UAEA,cAAcC,EAA2B,CACjD,OAAOF,EAAc,IAAIE,CAAK,CAChC,CAEA,KAAKC,EAAiCC,EAAqC,CACzE,GAAID,EACF,QAAWE,KAAOF,EAAQ,CACxB,IAAMG,EAAWH,EAAOE,CAAG,EAEvBN,EAAU,IAAIO,CAAQ,EACxB,KAAK,YAAY,IAAID,EAAKN,EAAU,IAAIO,CAAQ,CAAE,GAElD,QAAQ,KACN,sBAAsBA,CAAQ,cAAcD,CAAG,qBAAqB,KAAK,cAAc,KAAK,aAAa,CAAC,IAC5G,EACA,KAAK,YAAY,IAAIA,EAAK,KAAK,aAAa,GAG9CV,EAAY,IAAIU,CAAG,CACrB,CAIF,OAAID,IAAa,SACf,KAAK,UAAYA,GAGZ,IACT,CAEQ,qBAAqBR,EAAoB,CAC/C,OAAK,KAAK,YAAY,IAAIA,CAAG,EAMtB,KAAK,YAAY,IAAIA,CAAG,GALxBD,EAAY,IAAIC,CAAG,GACtB,QAAQ,MAAM,8BAA8BA,CAAG,GAAG,EAE7C,KAAK,cAGhB,CAEQ,IAAsBM,EAAcN,EAAQW,EAAkBC,EAAiC,CACrG,GAAI,CAAC,KAAK,UACR,OAGF,IAAMC,EAAiB,KAAK,qBAAqBb,CAAG,EAEpD,GAAIM,EAAQO,EACV,OAGF,IAAMH,EAAW,KAAK,cAAcJ,CAAK,EACzC,KAAK,UAAUI,EAAUV,EAAKW,EAASC,CAAc,CACvD,CAEA,MAAwBZ,EAAQW,KAAqBC,EAAiC,CACpF,KAAK,IAAI,EAAaZ,EAAKW,EAASC,CAAc,CACpD,CAEA,MAAwBZ,EAAQW,KAAqBC,EAAiC,CACpF,KAAK,IAAI,EAAaZ,EAAKW,EAASC,CAAc,CACpD,CAEA,KAAuBZ,EAAQW,KAAqBC,EAAiC,CACnF,KAAK,IAAI,EAAYZ,EAAKW,EAASC,CAAc,CACnD,CAEA,MAAwBZ,EAAQW,KAAqBC,EAAiC,CACpF,KAAK,IAAI,EAAaZ,EAAKW,EAASC,CAAc,CACpD,CAEA,KAAuBZ,EAAQW,KAAqBC,EAAiC,CACnF,KAAK,IAAI,EAAYZ,EAAKW,EAASC,CAAc,CACnD,CACF,EAEaE,EAAM,IAAIT",
  "names": ["LogLevel", "tagRegistry", "tag", "_", "prop", "LEVEL_MAP", "LEVEL_STR_MAP", "Log", "level", "config", "callback", "key", "levelStr", "message", "optionalParams", "effectiveLevel", "log"]
}
