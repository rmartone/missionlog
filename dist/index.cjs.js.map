{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n * @author Ray Martone\n * @copyright Copyright (c) 2019-2025 Ray Martone\n * @license MIT\n * @description Log adapter providing level-based filtering and tagging.\n */\n\nenum Level {\n  TRACE = 1,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  OFF,\n}\n\nexport enum LogLevel {\n  TRACE = 'TRACE',\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n  OFF = 'OFF',\n}\n\nexport type LogCallback = (\n  level: LogLevelStr,\n  tag: string,\n  message: unknown,\n  optionalParams: unknown[],\n) => void;\n\nexport type LogLevelStr = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\n\nconst DEFAULT_TAG = 'default';\nconst tagRegistry = new Set<string>();\n\nexport const tag: Record<string, string> = new Proxy(\n  {},\n  {\n    get(_, prop: string) {\n      if (typeof prop === 'string' && tagRegistry.has(prop)) {\n        return prop;\n      }\n      return undefined;\n    },\n    ownKeys() {\n      return Array.from(tagRegistry);\n    },\n    getOwnPropertyDescriptor() {\n      return { enumerable: true, configurable: true };\n    },\n  },\n);\n\nconst LEVEL_STR_MAP = new Map<Level, LogLevelStr>([\n  [Level.TRACE, 'TRACE'],\n  [Level.DEBUG, 'DEBUG'],\n  [Level.INFO, 'INFO'],\n  [Level.WARN, 'WARN'],\n  [Level.ERROR, 'ERROR'],\n  [Level.OFF, 'OFF'],\n]);\n\nexport class Log {\n  private _defaultLevel: Level = Level.INFO;\n  protected readonly _tagToLevel = new Map<string, Level>();\n  protected _callback?: LogCallback | null;\n\n  init(config?: Record<string, string>, callback?: LogCallback | null): this {\n    if (config) {\n      for (const key in config) {\n        const levelStr = config[key] as LogLevelStr;\n\n        if (Object.values(LogLevel).includes(levelStr as LogLevel)) {\n          const level = (Level as unknown as Record<string, Level>)[levelStr];\n\n          if (key === DEFAULT_TAG) {\n            this._defaultLevel = level;\n          } else {\n            this._tagToLevel.set(key, level);\n            tagRegistry.add(key);\n          }\n        } else {\n          console.warn(\n            `Invalid log level \"${levelStr}\" for tag \"${key}\". Using default (${LEVEL_STR_MAP.get(this._defaultLevel)}).`,\n          );\n          this._tagToLevel.set(key, Level.DEBUG);\n          tagRegistry.add(key);\n        }\n      }\n    }\n\n    if (callback !== undefined) {\n      this._callback = callback;\n    }\n\n    return this;\n  }\n\n  private _log(level: Level, messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    if (!this._callback || !messageOrTag) return;\n\n    let tag: string;\n    let message: unknown;\n\n    if (typeof messageOrTag === 'string' && tagRegistry.has(messageOrTag)) {\n      tag = messageOrTag;\n      message = optionalParams[0] ?? '';\n      optionalParams = optionalParams.slice(1);\n    } else {\n      tag = '';\n      message = messageOrTag;\n    }\n\n    // no message nothing to log...\n    if (!message) return;\n\n    const effectiveLevel = this._tagToLevel.get(tag || DEFAULT_TAG) ?? this._defaultLevel;\n    if (level < effectiveLevel) return;\n\n    this._callback(\n      LEVEL_STR_MAP.get(level)!,\n      tag,\n      message,\n      optionalParams.filter((param) => param !== undefined),\n    );\n  }\n\n  public debug(messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.DEBUG, messageOrTag, ...optionalParams);\n  }\n\n  public error(messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.ERROR, messageOrTag, ...optionalParams);\n  }\n\n  public info(messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.INFO, messageOrTag, ...optionalParams);\n  }\n\n  public log(messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.INFO, messageOrTag, ...optionalParams);\n  }\n\n  public trace(messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.TRACE, messageOrTag, ...optionalParams);\n  }\n\n  public warn(messageOrTag?: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.WARN, messageOrTag, ...optionalParams);\n  }\n}\n\nexport const log = new Log();\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "Log", "LogLevel", "log", "tag", "__toCommonJS", "Level", "DEFAULT_TAG", "tagRegistry", "_", "prop", "LEVEL_STR_MAP", "config", "callback", "key", "levelStr", "level", "messageOrTag", "optionalParams", "message", "effectiveLevel", "param"]
}
