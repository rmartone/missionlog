{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n * @author Ray Martone\n * @copyright Copyright (c) 2019-2025 Ray Martone\n * @license MIT\n * @description Log adapter providing level-based filtering and tagging.\n */\n\nenum Level {\n  TRACE = 1,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  OFF,\n}\n\nexport enum LogLevel {\n  TRACE = \"TRACE\",\n  DEBUG = \"DEBUG\",\n  INFO = \"INFO\",\n  WARN = \"WARN\",\n  ERROR = \"ERROR\",\n  OFF = \"OFF\",\n}\n\nexport type LogCallback = (\n  level: LogLevelStr,\n  tag: string,\n  message: unknown,\n  optionalParams: unknown[]\n) => void;\n\nexport type LogLevelStr = \"TRACE\" | \"DEBUG\" | \"INFO\" | \"WARN\" | \"ERROR\" | \"OFF\";\n\nconst DEFAULT_TAG = \"default\";\nconst tagRegistry = new Set<string>();\n\nexport const tag: Record<string, string> = new Proxy(\n  {},\n  {\n    get(_, prop: string) {\n      if (typeof prop === \"string\" && tagRegistry.has(prop)) {\n        return prop;\n      }\n      return undefined;\n    },\n    ownKeys() {\n      return Array.from(tagRegistry);\n    },\n    getOwnPropertyDescriptor() {\n      return { enumerable: true, configurable: true };\n    },\n  }\n);\n\nconst LEVEL_STR_MAP = new Map<Level, LogLevelStr>([\n  [Level.TRACE, \"TRACE\"],\n  [Level.DEBUG, \"DEBUG\"],\n  [Level.INFO, \"INFO\"],\n  [Level.WARN, \"WARN\"],\n  [Level.ERROR, \"ERROR\"],\n  [Level.OFF, \"OFF\"],\n]);\n\nexport class Log {\n  private _defaultLevel: Level = Level.INFO;\n  protected readonly _tagToLevel = new Map<string, Level>();\n  protected _callback?: LogCallback | null;\n\n  init(config?: Record<string, string>, callback?: LogCallback | null): this {\n    if (config) {\n      for (const key in config) {\n        const levelStr = config[key] as LogLevelStr;\n\n        if (LEVEL_STR_MAP.has(levelStr as unknown as Level)) {\n          if (key === DEFAULT_TAG) {\n            this._defaultLevel = levelStr as unknown as Level;\n          } else {\n            this._tagToLevel.set(key, levelStr as unknown as Level);\n            tagRegistry.add(key);\n          }\n        } else {\n          console.warn(\n            `Invalid log level \"${levelStr}\" for tag \"${key}\". Using default (${LEVEL_STR_MAP.get(this._defaultLevel)}).`\n          );\n          this._tagToLevel.set(key, this._defaultLevel);\n          tagRegistry.add(key);\n        }\n      }\n    }\n\n    if (callback !== undefined) {\n      this._callback = callback;\n    }\n\n    return this;\n  }\n\n  private _log(level: Level, messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    if (!this._callback) return;\n\n    let tag: string;\n    let message: unknown;\n    let params: unknown[];\n\n    if (typeof messageOrTag === \"string\" && tagRegistry.has(messageOrTag)) {\n      tag = messageOrTag;\n      message = optionalParams.length > 0 ? optionalParams[0] : undefined;\n      params = optionalParams.slice(1);\n    } else {\n      tag = DEFAULT_TAG;\n      message = messageOrTag;\n      params = optionalParams;\n    }\n\n    const effectiveLevel = this._tagToLevel.get(tag) ?? this._defaultLevel;\n    if (level < effectiveLevel) return;\n\n    this._callback(LEVEL_STR_MAP.get(level)!, tag, message, params);\n  }\n\n  public log(messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.INFO, messageOrTag, ...optionalParams);\n  }\n\n  public debug(messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.DEBUG, messageOrTag, ...optionalParams);\n  }\n\n  public error(messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.ERROR, messageOrTag, ...optionalParams);\n  }\n\n  public info(messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.INFO, messageOrTag, ...optionalParams);\n  }\n\n  public trace(messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.TRACE, messageOrTag, ...optionalParams);\n  }\n\n  public warn(messageOrTag: unknown, ...optionalParams: unknown[]): void {\n    this._log(Level.WARN, messageOrTag, ...optionalParams);\n  }\n}\n\nexport const log = new Log();\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,SAAAE,EAAA,aAAAC,EAAA,QAAAC,EAAA,QAAAC,IAAA,eAAAC,EAAAN,GAAA;AAAA;AAAA;AAAA;AAAA;GAgBO,IAAKO,OACVA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,IAAM,MANIA,OAAA,IAkBNC,EAAc,UACdC,EAAc,IAAI,IAEXC,EAA8B,IAAI,MAC7C,CAAC,EACD,CACE,IAAIC,EAAGC,EAAc,CACnB,GAAI,OAAOA,GAAS,UAAYH,EAAY,IAAIG,CAAI,EAClD,OAAOA,CAGX,EACA,SAAU,CACR,OAAO,MAAM,KAAKH,CAAW,CAC/B,EACA,0BAA2B,CACzB,MAAO,CAAE,WAAY,GAAM,aAAc,EAAK,CAChD,CACF,CACF,EAEMI,EAAgB,IAAI,IAAwB,CAChD,CAAC,EAAa,OAAO,EACrB,CAAC,EAAa,OAAO,EACrB,CAAC,EAAY,MAAM,EACnB,CAAC,EAAY,MAAM,EACnB,CAAC,EAAa,OAAO,EACrB,CAAC,EAAW,KAAK,CACnB,CAAC,EAEYC,EAAN,KAAU,CACP,cAAuB,EACZ,YAAc,IAAI,IAC3B,UAEV,KAAKC,EAAiCC,EAAqC,CACzE,GAAID,EACF,QAAWE,KAAOF,EAAQ,CACxB,IAAMG,EAAWH,EAAOE,CAAG,EAEvBJ,EAAc,IAAIK,CAA4B,EAC5CD,IAAQT,EACV,KAAK,cAAgBU,GAErB,KAAK,YAAY,IAAID,EAAKC,CAA4B,EACtDT,EAAY,IAAIQ,CAAG,IAGrB,QAAQ,KACN,sBAAsBC,CAAQ,cAAcD,CAAG,qBAAqBJ,EAAc,IAAI,KAAK,aAAa,CAAC,IAC3G,EACA,KAAK,YAAY,IAAII,EAAK,KAAK,aAAa,EAC5CR,EAAY,IAAIQ,CAAG,EAEvB,CAGF,OAAID,IAAa,SACf,KAAK,UAAYA,GAGZ,IACT,CAEQ,KAAKG,EAAcC,KAA0BC,EAAiC,CACpF,GAAI,CAAC,KAAK,UAAW,OAErB,IAAIX,EACAY,EACAC,EAEA,OAAOH,GAAiB,UAAYX,EAAY,IAAIW,CAAY,GAClEV,EAAMU,EACNE,EAAUD,EAAe,OAAS,EAAIA,EAAe,CAAC,EAAI,OAC1DE,EAASF,EAAe,MAAM,CAAC,IAE/BX,EAAMF,EACNc,EAAUF,EACVG,EAASF,GAGX,IAAMG,EAAiB,KAAK,YAAY,IAAId,CAAG,GAAK,KAAK,cACrDS,EAAQK,GAEZ,KAAK,UAAUX,EAAc,IAAIM,CAAK,EAAIT,EAAKY,EAASC,CAAM,CAChE,CAEO,IAAIH,KAA0BC,EAAiC,CACpE,KAAK,KAAK,EAAYD,EAAc,GAAGC,CAAc,CACvD,CAEO,MAAMD,KAA0BC,EAAiC,CACtE,KAAK,KAAK,EAAaD,EAAc,GAAGC,CAAc,CACxD,CAEO,MAAMD,KAA0BC,EAAiC,CACtE,KAAK,KAAK,EAAaD,EAAc,GAAGC,CAAc,CACxD,CAEO,KAAKD,KAA0BC,EAAiC,CACrE,KAAK,KAAK,EAAYD,EAAc,GAAGC,CAAc,CACvD,CAEO,MAAMD,KAA0BC,EAAiC,CACtE,KAAK,KAAK,EAAaD,EAAc,GAAGC,CAAc,CACxD,CAEO,KAAKD,KAA0BC,EAAiC,CACrE,KAAK,KAAK,EAAYD,EAAc,GAAGC,CAAc,CACvD,CACF,EAEaI,EAAM,IAAIX",
  "names": ["index_exports", "__export", "Log", "LogLevel", "log", "tag", "__toCommonJS", "LogLevel", "DEFAULT_TAG", "tagRegistry", "tag", "_", "prop", "LEVEL_STR_MAP", "Log", "config", "callback", "key", "levelStr", "level", "messageOrTag", "optionalParams", "message", "params", "effectiveLevel", "log"]
}
