{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n * @author Ray Martone\n * @copyright Copyright (c) 2019-2025 Ray Martone\n * @license MIT\n * @description Log adapter providing level-based filtering and tagging.\n */\n\n/**\n * Numeric representation of log levels, where ERROR > WARN > INFO.\n */\nenum Level {\n  TRACE = 1,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  OFF,\n}\n\n/**\n * Log levels as strings for event handling.\n */\nexport enum LogLevel {\n  TRACE = 'TRACE',\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n  OFF = 'OFF',\n}\n\n/**\n * Callback function type for handling log events.\n */\nexport type LogCallback = (level: LogLevelStr, tag: string, message: unknown, optionalParams: unknown[]) => void;\n\n/**\n * Allowed log level strings.\n */\nexport type LogLevelStr = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\n\n/**\n * Internal registry of known log tags.\n */\nconst tagRegistry = new Set<string>();\n\n/**\n * Proxy-based dictionary that allows dynamic tag access (`tag.system`).\n */\nexport const tag: Record<string, string> = new Proxy(\n  {},\n  {\n    get(target, prop: string) {\n      if (typeof prop === 'string') {\n        if (!tagRegistry.has(prop)) {\n          tagRegistry.add(prop);\n          console.debug(`logger: unregistered tag, \"${prop}\"`);\n        }\n        return prop;\n      }\n    },\n    ownKeys() {\n      return Array.from(tagRegistry);\n    },\n    getOwnPropertyDescriptor() {\n      return { enumerable: true, configurable: true };\n    },\n  },\n);\n\n/**\n * Direct mapping from log level strings to numeric values.\n */\nconst LEVEL_MAP = new Map<LogLevelStr, Level>([\n  ['TRACE', Level.TRACE],\n  ['DEBUG', Level.DEBUG],\n  ['INFO', Level.INFO],\n  ['WARN', Level.WARN],\n  ['ERROR', Level.ERROR],\n  ['OFF', Level.OFF],\n]);\n\n/**\n * Direct mapping from numeric levels to string levels.\n */\nconst LEVEL_STR_MAP = new Map<Level, LogLevelStr>([\n  [Level.TRACE, 'TRACE'],\n  [Level.DEBUG, 'DEBUG'],\n  [Level.INFO, 'INFO'],\n  [Level.WARN, 'WARN'],\n  [Level.ERROR, 'ERROR'],\n  [Level.OFF, 'OFF'],\n]);\n\n/**\n * Log class for level-based filtering and tagging.\n */\nexport class Log {\n  /** Default log level if not specified. */\n  private readonly _defaultLevel: Level = Level.TRACE;\n\n  /** Mapping of tags to their assigned log levels. */\n  protected readonly _tagToLevel = new Map<string, Level>();\n\n  /** Optional callback function for handling log events. */\n  protected _callback?: LogCallback | null;\n\n  /**\n   * Converts a log level string to its corresponding numeric Level.\n   * @param levelStr The log level string.\n   * @returns The corresponding numeric log level.\n   */\n  protected parseLevel(levelStr: LogLevelStr): Level {\n    return LEVEL_MAP.get(levelStr) ?? this._defaultLevel;\n  }\n\n  /**\n   * Converts a numeric log level to its corresponding string representation.\n   * @param level The numeric log level.\n   * @returns The corresponding log level string.\n   */\n  protected levelToString(level: Level): LogLevelStr {\n    return LEVEL_STR_MAP.get(level) ?? LEVEL_STR_MAP.get(this._defaultLevel)!;\n  }\n\n  /**\n   * Initializes the logger with optional tag configurations.\n   * @param config An object mapping tags to log levels.\n   * @param callback A function to handle log messages.\n   * @returns The Log instance for method chaining.\n   */\n  init(config?: Record<string, string>, callback?: LogCallback | null): this {\n    if (config) {\n      for (const key in config) {\n        const levelStr = config[key] as LogLevelStr;\n\n        if (LEVEL_MAP.has(levelStr)) {\n          this._tagToLevel.set(key, LEVEL_MAP.get(levelStr)!);\n        } else {\n          console.warn(\n            `Invalid log level \"${levelStr}\" for tag \"${key}\". Using default (${this.levelToString(this._defaultLevel)}).`,\n          );\n          this._tagToLevel.set(key, this._defaultLevel);\n        }\n\n        tagRegistry.add(key);\n      }\n    }\n\n    if (callback !== undefined) {\n      this._callback = callback;\n    }\n\n    return this;\n  }\n\n  /**\n   * Retrieves the effective log level for a tag.\n   * Logs a warning if the tag is unregistered.\n   * @param tag The log tag.\n   * @returns The numeric log level for the tag.\n   */\n  private getEffectiveLogLevel(tag: string): Level {\n    const level = this._tagToLevel.get(tag);\n\n    if (level === undefined) {\n      console.debug(`logger: unregistered tag, \"${tag}\"`);\n      return this._defaultLevel;\n    }\n\n    return level;\n  }\n\n  /**\n   * Internal log method that processes log messages.\n   * @param level The numeric log level.\n   * @param tag The category or tag for the log message.\n   * @param message The message content.\n   * @param optionalParams Additional parameters to log.\n   */\n  private log<T extends string>(level: Level, tag: T, message: unknown, optionalParams: unknown[]): void {\n    if (!this._callback) {\n      return;\n    }\n\n    const effectiveLevel = this.getEffectiveLogLevel(tag);\n\n    if (level < effectiveLevel) {\n      return;\n    }\n\n    const levelStr = this.levelToString(level);\n\n    try {\n      this._callback(levelStr, tag, message, optionalParams);\n    } catch (err) {\n      console.error(`Error in log callback for tag \"${tag}\":`, err);\n    }\n  }\n\n  /**\n   * Logs a message at the DEBUG level.\n   * @param tag The category or tag for the log message.\n   * @param message The message content.\n   * @param optionalParams Additional parameters to log.\n   */\n  debug<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.DEBUG, tag, message, optionalParams);\n  }\n\n  /**\n   * Logs a message at the ERROR level.\n   * @param tag The category or tag for the log message.\n   * @param message The message content.\n   * @param optionalParams Additional parameters to log.\n   */\n  error<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.ERROR, tag, message, optionalParams);\n  }\n\n  /**\n   * Logs a message at the INFO level.\n   * @param tag The category or tag for the log message.\n   * @param message The message content.\n   * @param optionalParams Additional parameters to log.\n   */\n  info<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.INFO, tag, message, optionalParams);\n  }\n\n  /**\n   * Logs a message at the TRACE level.\n   * @param tag The category or tag for the log message.\n   * @param message The message content.\n   * @param optionalParams Additional parameters to log.\n   */\n  trace<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.TRACE, tag, message, optionalParams);\n  }\n\n  /**\n   * Logs a message at the WARN level.\n   * @param tag The category or tag for the log message.\n   * @param message The message content.\n   * @param optionalParams Additional parameters to log.\n   */\n  warn<T extends string>(tag: T, message: unknown, ...optionalParams: unknown[]): void {\n    this.log(Level.WARN, tag, message, optionalParams);\n  }\n}\n\n/**\n * Singleton Log instance.\n */\nexport const log = new Log();\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "Log", "LogLevel", "log", "tag", "__toCommonJS", "LogLevel", "tagRegistry", "tag", "target", "prop", "LEVEL_MAP", "LEVEL_STR_MAP", "Log", "levelStr", "level", "config", "callback", "key", "message", "optionalParams", "effectiveLevel", "err", "log"]
}
