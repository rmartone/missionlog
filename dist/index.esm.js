/**
 * @author Ray Martone
 * @copyright Copyright (c) 2019-2025 Ray Martone
 * @license MIT
 * @description Log adapter providing level-based filtering and tagging.
 */var c=(l=>(l.TRACE="TRACE",l.DEBUG="DEBUG",l.INFO="INFO",l.WARN="WARN",l.ERROR="ERROR",l.OFF="OFF",l))(c||{}),a="default",i=new Set,d=new Proxy({},{get(R,e){if(typeof e=="string"&&i.has(e))return e},ownKeys(){return Array.from(i)},getOwnPropertyDescriptor(){return{enumerable:!0,configurable:!0}}}),s=new Map([[1,"TRACE"],[2,"DEBUG"],[3,"INFO"],[4,"WARN"],[5,"ERROR"],[6,"OFF"]]),u=class{_defaultLevel=3;_tagToLevel=new Map;_callback;init(e,n){if(e)for(let t in e){let o=e[t];s.has(o)?t===a?this._defaultLevel=o:(this._tagToLevel.set(t,o),i.add(t)):(console.warn(`Invalid log level "${o}" for tag "${t}". Using default (${s.get(this._defaultLevel)}).`),this._tagToLevel.set(t,this._defaultLevel),i.add(t))}return n!==void 0&&(this._callback=n),this}_log(e,n,...t){if(!this._callback)return;let o,r,l;typeof n=="string"&&i.has(n)?(o=n,r=t.length>0?t[0]:void 0,l=t.slice(1)):(o=a,r=n,l=t);let g=this._tagToLevel.get(o)??this._defaultLevel;e<g||this._callback(s.get(e),o,r,l)}log(e,...n){this._log(3,e,...n)}debug(e,...n){this._log(2,e,...n)}error(e,...n){this._log(5,e,...n)}info(e,...n){this._log(3,e,...n)}trace(e,...n){this._log(1,e,...n)}warn(e,...n){this._log(4,e,...n)}},v=new u;export{u as Log,c as LogLevel,v as log,d as tag};
//# sourceMappingURL=index.esm.js.map
